#!/bin/sh

# a single command to visualize a project

# requires the convert_logs dir to be in the PATH

while getopts r opt
do
    case "$opt" in
      r)  reload=1;;
      \?)		# unknown flag
      	  echo >&2 "usage: $0 [-r]"
      	  echo >&2 "displays a visualization of a source-controlled project's commit history"
	      exit 1;;
    esac
done


# Set up $DYLD_LIBRARY_PATH on Mac OS X
if [ `uname -s` = "Darwin" ]; then
    lib_path=`dirname $0`
    lib_path=`dirname $lib_path`
    lib_path="$lib_path/lib"
    export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$lib_path
fi


if [ -d .git ]; then
    dir=`pwd`/.git/.code_swarm
    log() {
        git log --name-status --pretty=format:"%n------------------------------------------------------------------------%nr%h | %ae | %ai (%aD) | x lines%nChanged paths:" > $dir/temp.log
        convert_logs.py -g $dir/temp.log -o $dir/log.xml
        rm $dir/temp.log
    }
elif [ -d .svn ]; then
    dir=`pwd`/.svn/.code_swarm
    log() {
        svn log -v > $dir/temp.log
        convert_logs.py -s $dir/temp.log -o $dir/log.xml
        rm $dir/temp.log
    }
    convert="convert_logs.py -s"
elif [ -d .hg ]; then
    dir=`pwd`/.hg/.code_swarm
    log() {
        hg_log.py -o $dir/unsorted_log.xml .
        sort_code_swarm_input.py < $dir/unsorted_log.xml > $dir/log.xml
        rm $dir/unsorted_log.xml
    }
else
    echo "This directory isn't an svn, git, or hg project.  Run in the base directory of source-controlled project."
    exit 2
fi

mkdir -p $dir

if [ $reload ] || ! [ -a $dir/log.xml ]; then
    log
fi

if ! [ -a $dir/project.config ]; then
    echo "creating default config file at $dir/project.config"
    cp `dirname $0`/config.template $dir/project.config
fi

cd `dirname $0`/../
./run.sh $dir/project.config